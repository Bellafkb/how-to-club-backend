{"version":3,"sources":["../../controller/googlePlaces.js"],"names":["googlePlaces","places","GooglePlaces","config","GOOGLE_PLACES_API_KEY","fetchClubsNearByGeoCode","req","res","db","location","find","city","body","then","locationsResp","length","status","json","clubs","nearbySearch","text","Promise","all","JSON","parse","results","map","newLocation","Location","geometry","lat","lng","name","price_level","rating","user_ratings_total","vicinity","save","locations","err","send","module","exports"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,YAAY,GAAG,EAArB;AACA,IAAMC,MAAM,GAAG,IAAIC,4BAAJ,CAAiBC,mBAAOC,qBAAxB,CAAf;;AAEAJ,YAAY,CAACK,uBAAb;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAuC,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AACnCC,iCAAGC,QAAH,CAAYC,IAAZ,CAAiB;AAAEC,cAAAA,IAAI,EAAEL,GAAG,CAACM,IAAJ,CAASD;AAAjB,aAAjB,EACKE,IADL;AAAA;AAAA;AAAA;AAAA;AAAA,sCACU,kBAAOC,aAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACF,4BAAIA,aAAa,CAACC,MAAd,IAAwB,CAA5B,EAA+B;AAC3BR,0BAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBC,4BAAAA,KAAK,EAAGJ;AADS,2BAArB;AAGH,yBAJD,MAIO;AAECH,0BAAAA,IAFD,GAEQL,GAAG,CAACM,IAAJ,CAASD,IAFjB;AAGH,iCAAOL,GAAG,CAACM,IAAJ,CAASD,IAAhB;AACAV,0BAAAA,MAAM,CAACkB,YAAP,CAAoBb,GAAG,CAACM,IAAxB,EAA8BC,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA,oDAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAASO,sCAAAA,IAAT,SAASA,IAAT;AAAA;AAAA,6CACbC,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,KAAL,CAAWJ,IAAX,EAAiBK,OAAjB,CAAyBC,GAAzB,CAA6B,UAACjB,QAAD,EAAc;AACrE,4CAAIkB,WAAW,GAAG,IAAIC,qBAAJ,CACdnB,QAAQ,CAACoB,QAAT,CAAkBpB,QAAlB,CAA2BqB,GADb,EAEdrB,QAAQ,CAACoB,QAAT,CAAkBpB,QAAlB,CAA2BsB,GAFb,EAGdtB,QAAQ,CAACuB,IAHK,EAIdvB,QAAQ,CAACwB,WAJK,EAKdxB,QAAQ,CAACyB,MALK,EAMdzB,QAAQ,CAAC0B,kBANK,EAOd1B,QAAQ,CAAC2B,QAPK,EAQdzB,IARc,CAAlB;AASA,4CAAIH,qBAAGC,QAAP,CAAgBkB,WAAhB,EAA6BU,IAA7B;AACA,+CAAOV,WAAP;AACH,uCAZ6B,CAAZ,CADa;;AAAA;AAC/BW,sCAAAA,SAD+B;AAc/B/B,sCAAAA,GAAG,CAACU,IAAJ,CAAS;AAACC,wCAAAA,KAAK,EAAGoB;AAAT,uCAAT;;AAd+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAnC;;AAAA;AAAA;AAAA;AAAA,wCAgBW,UAACC,GAAD,EAAS;AACZhC,4BAAAA,GAAG,CAACiC,IAAJ,CAASD,GAAT;AACH,2BAlBL;AAoBH;;AA7BC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADV;;AAAA;AAAA;AAAA;AAAA,0BA+Ba,UAACA,GAAD,EAAS;AACdhC,cAAAA,GAAG,CAACU,IAAJ,CAASsB,GAAT;AACH,aAjCL;;AADmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAvC;;AAAA;AAAA;AAAA;AAAA;;AAqCAE,MAAM,CAACC,OAAP,GAAiB1C,YAAjB","sourcesContent":["import config from '../config';\nimport GooglePlaces from 'node-googleplaces';\nimport db from '../database';\nimport Location from \"../datatypes\";\n\nconst googlePlaces = {}\nconst places = new GooglePlaces(config.GOOGLE_PLACES_API_KEY);\n\ngooglePlaces.fetchClubsNearByGeoCode = async (req, res) => {\n    db.location.find({ city: req.body.city })\n        .then(async (locationsResp) => {\n            if (locationsResp.length >= 1) {\n                res.status(200).json({\n                    clubs : locationsResp\n                })\n            } else {\n                var locations;\n                var city = req.body.city;\n                delete req.body.city;\n                places.nearbySearch(req.body).then(async ({ text }) => {\n                    locations = await Promise.all(JSON.parse(text).results.map((location) => {\n                        let newLocation = new Location(\n                            location.geometry.location.lat,\n                            location.geometry.location.lng,\n                            location.name,\n                            location.price_level,\n                            location.rating,\n                            location.user_ratings_total,\n                            location.vicinity,\n                            city);\n                        new db.location(newLocation).save();\n                        return newLocation;\n                    }))\n                    res.json({clubs : locations});\n                })\n                    .catch((err) => {\n                        res.send(err)\n                    })\n\n            }\n        }).catch((err) => {\n            res.json(err)\n        })\n}\n\nmodule.exports = googlePlaces;\n"],"file":"googlePlaces.js"}