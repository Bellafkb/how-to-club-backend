{"version":3,"sources":["../../controller/eventbrite.js"],"names":["eventbrite","require","sdk","token","config","EVENTBRITE_API_KEY","eventBrite","myprofile","req","res","request","then","content","json","fetchEvents","body","city","radius","category","Promise","all","events","map","event","db","EventBrite","save","err","module","exports"],"mappings":";;AACA;;AAIA;;;;;;;;AALA,IAAMA,UAAU,GAAGC,OAAO,CAAC,YAAD,CAAP,WAAnB;;AAEA;AACA,IAAMC,GAAG,GAAGF,UAAU,CAAC;AAAEG,EAAAA,KAAK,EAAEC,mBAAOC;AAAhB,CAAD,CAAtB;AACA,IAAMC,UAAU,GAAG,EAAnB;;AAGAA,UAAU,CAACC,SAAX,GAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjCP,EAAAA,GAAG,CAACQ,OAAJ,CAAY,WAAZ,EACCC,IADD,CACM,UAAAC,OAAO,EAAI;AACbH,IAAAA,GAAG,CAACI,IAAJ,CAAS;AACLD,MAAAA,OAAO,EAAPA;AADK,KAAT;AAGH,GALD;AAMH,CAPD;;AASAN,UAAU,CAACQ,WAAX,GAAyB,UAACN,GAAD,EAAMC,GAAN,EAAc;AACnCP,EAAAA,GAAG,CAACQ,OAAJ,2CAA+CF,GAAG,CAACO,IAAJ,CAASC,IAAxD,8BAAgFR,GAAG,CAACO,IAAJ,CAASE,MAAzF,yBAA8GT,GAAG,CAACO,IAAJ,CAASG,QAAvH,GACCP,IADD;AAAA;AAAA;AAAA;AAAA;AAAA,4BACM,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACIO,OAAO,CAACC,GAAR,CAAYR,OAAO,CAACS,MAAR,CAAeC,GAAf,CAAmB,UAAAC,KAAK,EAAG;AACzC,oBAAIC,qBAAGC,UAAP,CAAkBF,KAAlB,EAAyBG,IAAzB;AACH,eAFiB,CAAZ,CADJ;;AAAA;AAIFjB,cAAAA,GAAG,CAACI,IAAJ,CAAS;AACLD,gBAAAA,OAAO,EAAPA;AADK,eAAT;;AAJE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADN;;AAAA;AAAA;AAAA;AAAA,gBAQS,UAACe,GAAD,EAAO;AACZlB,IAAAA,GAAG,CAACI,IAAJ,CAASc,GAAT;AACH,GAVD;AAWH,CAZD;;AAaAC,MAAM,CAACC,OAAP,GAAiBvB,UAAjB","sourcesContent":["const eventbrite = require('eventbrite').default;\nimport config from '../config'\n// Create configured Eventbrite SDK\nconst sdk = eventbrite({ token: config.EVENTBRITE_API_KEY });\nconst eventBrite = {}\nimport db from '../database'\n\neventBrite.myprofile = (req, res) => {\n    sdk.request('/users/me')\n    .then(content => {\n        res.json({\n            content\n        })\n    });\n}\n\neventBrite.fetchEvents = (req, res) => {\n    sdk.request(`/events/search?location.address=${req.body.city}&location.within=${req.body.radius}&categories=${req.body.category}`)\n    .then(async content => {\n        await Promise.all(content.events.map(event =>{\n            new db.EventBrite(event).save();\n        }))\n        res.json({\n            content\n        })\n    }).catch((err)=>{\n        res.json(err)\n    });\n}\nmodule.exports = eventBrite;"],"file":"eventbrite.js"}